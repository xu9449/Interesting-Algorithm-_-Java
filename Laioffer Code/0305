Selection Sort:

Test: 
'
//Given an array of integers, sort the elements in the array in ascending order. The selection sort algorithm should be used to solve this problem.
//
//Examples
//
//{1} is sorted to {1}
//{1, 2, 3} is sorted to {1, 2, 3}
//{3, 2, 1} is sorted to {1, 2, 3}
//{4, 2, -3, 6, 1} is sorted to {-3, 1, 2, 4, 6}
//Corner Cases
//
//What if the given array is null? In this case, we do not need to do anything.
//What if the given array is of length zero? In this case, we do not need to do anything.
                                                                                                                            //哥德巴赫猜想
public class SortingAlgorithm {
    public static void main(String[] args) {  // 不用static的方法，SelectionAlgorithm solution = new SelectionAlgorithm() 
        int[] test = {1, 0, 5, 1, -3, 4};
        int[] result = new int[test.length];
        result = SelectionSort(test);
        System.out.println(Arrays.toString(result));

    }

    public static int[] SelectionSort(int[] array) {   //只有class名字大写，其他一律小写 selectionSort
        if (array == null || array.length == 0) {      // 此处array.length <= 1 更好
            return array;
        }

        for (int i = 0; i < array.length; i++) { //此处应为array.length < array.length - 1

            for (int j = i + 1; j < array.length; j++) {   // 此处有不同，标准答案为设置最小值min，然后遍历一边后将最小值更新
                if (array[j] < array[i]) {                 // 我为每次找到最小值都和i更新，程序更加复杂，应该用标准答案
                    Swap(array, i, j);
                }
            }

        }
        return array;
    }

    public static int[] Swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
        return array;
    }


}

'
