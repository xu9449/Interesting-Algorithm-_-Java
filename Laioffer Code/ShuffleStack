import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;

public class Test {

    public static void main(String[] args) {
        Deque<Integer> stack1 = new LinkedList<>();
        Deque<Integer> stack2 = new LinkedList<>();
        stack1.push(2);
        stack1.push(1);
        stack1.push(3);
      //  stack1.push(1);

        Goldbach solution = new Goldbach();
        solution.shuffle(stack1, stack2);
        //System.out.println(Arrays.toString(result));

    }
}

class Goldbach {

        public void shuffle (Deque<Integer> stack1, Deque<Integer> stack2) {
            Deque<Integer> s = stack1;
            stack1 = stack2;
            stack2 = s;
            stack1 = reverse (stack1);
            stack2 = reverse (stack2);
        }

        private Deque<Integer> reverse (Deque<Integer> stack) {
            if (stack.isEmpty()) return stack;
            Queue<Integer> q = new LinkedList<>();
            while (!stack.isEmpty()) {
                q.offer(stack.pop());
            }
            while (!q.isEmpty()) {
                stack.push(q.poll());
            }
            return stack;
        }


}
