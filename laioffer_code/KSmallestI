import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {

	public int[] kSmallestI(int[] array, int k) {
		if (array.length == 0 || k == 0) {
			return new int[0];
		}
		PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>() {
			@Override
			public int compare(Integer o1, Integer o2) {
				if (o1.equals(o2)) {
					return 0;
				}
				return o1 > o2 ? -1:1;
			}
		});
		for ( int i = 0; i < array.length; i++) {
			if(i < k) {
				maxHeap.offer(array[i]);
			}
			else if (array[i] < maxHeap.peek()) {
				maxHeap.poll();
				maxHeap.offer(array[i]);
				
			}
		}
		int[] result = new int[k];
		for (int i = k - 1; i >= 0; i--) {
			result[i] = maxHeap.poll();
		}
		return result;
	}
	
	public static void main(String[] args) {
		int[] a = {1,4,5,2,6,7,8,34};
		int[] ksmall = new Solution().kSmallestI(a, 5);
		System.out.println(Arrays.toString(ksmall));
		}
	}
 